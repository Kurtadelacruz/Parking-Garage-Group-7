
must implement Serializable to ParkingGarage and all the classes encapsulated in it.



Server:


/***
1. Client App Starts â†’ Creates GUI
When you run your main() method in Client.java, it usually:

Initializes the GUI (using Swing).

Also connects to the server via socket, either during startup or the first time the user tries to interact with the system.

2. Socket Connection Is Created (One Time)
You open a socket connection like:

java
Copy
Edit
Socket socket = new Socket("localhost", 1234);
ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
These in and out streams are reused for the entire session.

You send messages like "ENTER_GARAGE" or "PAY_TICKET T1234" over this connection.

3. User Clicks a Button in GUI
Each button has a listener (e.g., ActionListener) that:

Reads GUI input (e.g., ticket number).

Sends a command over the already-open socket.

Waits for and displays the serverâ€™s response.

ðŸ”„ When GUI Shows vs When Socket Is Created

StepHappens When?
GUI is createdRight away in main() (e.g., new ClientUI();)
Socket is createdEither at the same time, or on first user action (e.g., lazy initialization)
Button clicked by userListener sends command over the socket
Socket stays openFor the full client session until user exits
âœ… Example Code Flow
java
Copy
Edit
public class ClientApp {

    private Socket socket;
    private ObjectOutputStream out;
    private ObjectInputStream in;

    public ClientApp() {
        // 1. Create GUI
        createGUI();

        // 2. Establish connection to server
        try {
            socket = new Socket("localhost", 1234);
            out = new ObjectOutputStream(socket.getOutputStream());
            in = new ObjectInputStream(socket.getInputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void createGUI() {
        JFrame frame = new JFrame("Parking Garage");
        JButton enterButton = new JButton("Enter Garage");

        // 3. Handle button click
        enterButton.addActionListener(e -> {
            try {
                out.writeObject("ENTER_GARAGE");
                String response = (String) in.readObject();
                JOptionPane.showMessageDialog(frame, "Server says: " + response);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        frame.add(enterButton);
        frame.setSize(300, 200);
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        new ClientApp(); // This starts everything
    }
}
ðŸ§  Summary:
GUI shows up first, or alongside socket connection.

Socket is created once, and kept open while the client is running.

Each button click reuses the same socket to send different commands.

Threads are not created for every command â€” unless you want to keep the UI responsive (then you can use background threads, like SwingWorker).




1. multiple garages
2. 
3. employee login management - ParkingAttendant, Admin
4.
5. fix need to run driver before server attempts to run
6. check constraints and if ParkingExceptions applicable


Note: 
	  - should facade be implemented
      - what uses can my adapted apply (thread-safe thoughts)
























	public synchronized void updateLevelParkingCount(int parkingLevel, int parkingSpace) {

		
		
		
		
		
		
		// Search for given parkingSpace within one of the parkingLevels
		// apply changes to parkingSpace
		// 1. Search parkingLevel
		for (ParkingLevel level : parkingLevels)
			if (level.getLevelNumber() == parkingLevel) {
				
			}
			
		//     2. Search parkingSpace in parkingLevel
		//         3. make changes to parkingSpace occupied state
		
		// - potentially throw ParkingException if status is already equal to change requested by caller
	}




















***/